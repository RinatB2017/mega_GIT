/*********************************************************************************
**                                                                              **
**     Copyright (C) 2012                                                       **
**                                                                              **
**     This program is free software: you can redistribute it and/or modify     **
**     it under the terms of the GNU General Public License as published by     **
**     the Free Software Foundation, either version 3 of the License, or        **
**     (at your option) any later version.                                      **
**                                                                              **
**     This program is distributed in the hope that it will be useful,          **
**     but WITHOUT ANY WARRANTY; without even the implied warranty of           **
**     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            **
**     GNU General Public License for more details.                             **
**                                                                              **
**     You should have received a copy of the GNU General Public License        **
**     along with this program.  If not, see http://www.gnu.org/licenses/.      **
**                                                                              **
**********************************************************************************
**                   Author: Bikbao Rinat Zinorovich                            **
**********************************************************************************/
#include <QNetworkAccessManager>
#include <QWebElementCollection>
#include <QNetworkCookieJar>
#include <QStringListModel>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QProgressBar>
#include <QWebSettings>
#include <QMessageBox>
#include <QWebHistory>
#include <QWebElement>
#include <QHeaderView>
#include <QToolButton>
#include <QByteArray>
#include <QTableView>
#include <QLineEdit>
#include <QWebFrame>
#include <QTextEdit>
#include <QToolBar>
#include <QWidget>
#include <QDebug>
#include <QtSql>
#include <QUrl>
//--------------------------------------------------------------------------------
#include "ui_mainbox.h"
//--------------------------------------------------------------------------------
#include "persistentcookiejar.hpp"
#include "websettingbox.hpp"
#include "helpbrowser.hpp"
#include "mainwindow.hpp"
#include "findlinks.hpp"
#include "mainbox.hpp"
//--------------------------------------------------------------------------------
MainBox::MainBox(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::MainBox),
    main_frame(0),
    leAddress(0)
{
    init();
}
//--------------------------------------------------------------------------------
MainBox::~MainBox()
{
    delete ui;
}
//--------------------------------------------------------------------------------
void MainBox::connect_log(void)
{
    if(parentWidget())
    {
        connect(this, SIGNAL(info(QString)),  parentWidget(), SIGNAL(info(QString)));
        connect(this, SIGNAL(debug(QString)), parentWidget(), SIGNAL(debug(QString)));
        connect(this, SIGNAL(error(QString)), parentWidget(), SIGNAL(error(QString)));
    }
    else
    {
        connect(this, SIGNAL(info(QString)),  this, SLOT(log(QString)));
        connect(this, SIGNAL(debug(QString)), this, SLOT(log(QString)));
        connect(this, SIGNAL(error(QString)), this, SLOT(log(QString)));
    }
}
//--------------------------------------------------------------------------------
void MainBox::log(const QString &data)
{
    qDebug() << data;
}
//--------------------------------------------------------------------------------
void MainBox::init()
{
    ui->setupUi(this);

    connect_log();

    createUrlBar();

    main_frame = ui->webView->page()->mainFrame();

    connect(ui->webView, SIGNAL(loadStarted()), this, SLOT(started()));
    connect(ui->webView, SIGNAL(loadFinished(bool)), this, SLOT(finished(bool)));
    connect(ui->webView, SIGNAL(loadProgress(int)), progressBar, SLOT(setValue(int)));

    cookies = new PersistentCookieJar(this, "cookies");
    connect(cookies, SIGNAL(info(QString)),  this, SIGNAL(info(QString)));
    connect(cookies, SIGNAL(debug(QString)), this, SIGNAL(debug(QString)));
    connect(cookies, SIGNAL(error(QString)), this, SIGNAL(error(QString)));
    cookies->load();
    ui->webView->page()->networkAccessManager()->setCookieJar(cookies);
}
//--------------------------------------------------------------------------------
QToolButton *MainBox::add_button(QToolBar *tool_bar,
                                 QToolButton *tool_button,
                                 QIcon icon,
                                 const QString &text,
                                 const QString &tool_tip)
{
    if(!tool_bar) return NULL;
    if(!tool_button) return NULL;

    tool_button->setIcon(icon);
    tool_button->setText(text);
    tool_button->setToolTip(tool_tip);
    tool_bar->addWidget(tool_button);

    return tool_button;
}
//--------------------------------------------------------------------------------
void MainBox::createUrlBar(void)
{
    QToolBar *toolBar = new QToolBar(tr("urlbar"));

    MainWindow *mw = (MainWindow *)parentWidget();
    if(!mw) return;

    mw->addToolBar(Qt::TopToolBarArea, toolBar);

    QToolButton *btn_websettings = add_button(toolBar,
                                              new QToolButton(this),
                                              QIcon::fromTheme("applications-system"),
                                              "websettings",
                                              "websettings");
    connect(btn_websettings, SIGNAL(clicked()), this, SLOT(run_websettingbox()));

    leAddress = new QLineEdit;
    leAddress->setText("http://www.home.net/svow");
    //leAddress->setMaximumWidth(400);

    toolBar->addWidget(leAddress);

    QToolButton *btn_open_url = add_button(toolBar,
                                           new QToolButton(this),
                                           qApp->style()->standardIcon(QStyle::SP_MediaPlay),
                                           "open url",
                                           "open url");

    connect(btn_open_url, SIGNAL(clicked()), this, SLOT(open_url()));
    connect(leAddress, SIGNAL(returnPressed()), this, SLOT(open_url()));

    progressBar = new QProgressBar;
    progressBar->setMaximumWidth(100);
    toolBar->addWidget(progressBar);

    toolBar->addSeparator();

    QToolButton *btn_run = add_button(toolBar,
                                      new QToolButton(this),
                                      qApp->style()->standardIcon(QStyle::SP_BrowserReload),
                                      "run",
                                      "run");
    QToolButton *btn_test = add_button(toolBar,
                                       new QToolButton(this),
                                       qApp->style()->standardIcon(QStyle::SP_CommandLink),
                                       "test",
                                       "test");
    QToolButton *btn_show_pages = add_button(toolBar,
                                             new QToolButton(this),
                                             QIcon(),
                                             "show pages",
                                             "show pages");
    QToolButton *btn_show_content_data = add_button(toolBar,
                                                    new QToolButton(this),
                                                    QIcon(),
                                                    "show content_data",
                                                    "show content_data");
    QToolButton *btn_show_cookies = add_button(toolBar,
                                               new QToolButton(this),
                                               QIcon(),
                                               "show cookies",
                                               "show cookies");
    QToolButton *btn_test_login = add_button(toolBar,
                                             new QToolButton(this),
                                             QIcon(),
                                             "test login",
                                             "test login");

    QToolButton *btn_find_and_append = add_button(toolBar,
                                                  new QToolButton(this),
                                                  QIcon(),
                                                  "find_and_append",
                                                  "find_and_append");

    connect(btn_run, SIGNAL(clicked()), this, SLOT(run()));
    connect(btn_test, SIGNAL(clicked()), this, SLOT(test()));
    connect(btn_show_pages, SIGNAL(clicked()), this, SLOT(show_pages()));
    connect(btn_show_content_data, SIGNAL(clicked()), this, SLOT(show_content_data()));
    connect(btn_show_cookies, SIGNAL(clicked()), this, SLOT(show_cookies()));
    connect(btn_test_login, SIGNAL(clicked()), this, SLOT(test_login()));
    connect(btn_find_and_append, SIGNAL(clicked()), this, SLOT(find_and_append()));
}
//--------------------------------------------------------------------------------
void MainBox::open_url(void)
{
    if(leAddress->text().isEmpty())
    {
        emit error(tr("Нет адреса"));
        return;
    }

    QString validLink = leAddress->text();

    //Добавляем информацию о протоколе, если она совсем отсутствует
    if(!validLink.toLower().startsWith("http"))
    {
        validLink = "http://" + validLink;
    }

    QUrl url(validLink);
    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/octet-stream");

    ui->webView->load(request);
}
//--------------------------------------------------------------------------------
void MainBox::started(void)
{
    is_loaded = false;
    //emit debug("started");
}
//--------------------------------------------------------------------------------
void MainBox::finished(bool state)
{
    if(state == false) return;
    //emit info(QString("bytes received = %1").arg(ui->webView->page()->bytesReceived()));
    progressBar->reset();
    cookies->save();
    //emit debug("finished");
    is_loaded = true;
}
//--------------------------------------------------------------------------------
void MainBox::updateText(void)
{
    ui->retranslateUi(this);
}
//--------------------------------------------------------------------------------
void MainBox::wait(int timeout_msec)
{
    QTime time;

    //emit debug("waiting...");
    time.start();
    while(!is_loaded)
    {
        QCoreApplication::processEvents();
        if(time.elapsed() > timeout_msec)
            break;
    }
}
//--------------------------------------------------------------------------------
void MainBox::wait_sec(int timeout_sec)
{
    QTime time;

    time.start();
    while(true)
    {
        QCoreApplication::processEvents();
        if(time.elapsed() > (timeout_sec * 1000))
            break;
    }
}
//--------------------------------------------------------------------------------
void MainBox::wait_msec(int timeout_msec)
{
    QTime time;

    time.start();
    while(true)
    {
        QCoreApplication::processEvents();
        if(time.elapsed() > timeout_msec)
            break;
    }
}
//--------------------------------------------------------------------------------
void MainBox::load_url(const QString &address,
                       bool show_address)
{
    QString validLink = address;

    //Добавляем информацию о протоколе, если она совсем отсутствует
    if(!validLink.toLower().startsWith("http"))
    {
        validLink = "http://" + validLink;
    }

    QUrl url(validLink);
    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/octet-stream");

    if(show_address)
        emit info(QString(tr("Загружаем %1")).arg(validLink));
    is_loaded = false;
    ui->webView->load(request);
    wait();
}
//--------------------------------------------------------------------------------
int MainBox::open_database(const QString &driver_name,
                           const QString &database_name)
{
    if(db.databaseName() != database_name)
    {
        db = QSqlDatabase::addDatabase(driver_name);
        db.setDatabaseName(database_name);
    }
    bool ok = db.open();
    if(ok == false)
    {
        emit error(QString(tr("База данных %1 не открыта!")).arg(database_name));
        return 1;
    }
    return 0;
}
//--------------------------------------------------------------------------------
void MainBox::drop_table(const QString &table_name)
{
    QSqlQuery sql;
    bool result = sql.exec(QString("DROP TABLE %1").arg(table_name));
    if(result == false)
    {
        emit error(QString("DROP TABLE %1 failed").arg(table_name));
    }
}
//--------------------------------------------------------------------------------
void MainBox::close_database(const QString &database_name)
{
    if(!db.isValid()) return;
    db.close();
    db.removeDatabase(database_name);
}
//--------------------------------------------------------------------------------
void MainBox::view_table(const QString &query)
{
    QSqlQueryModel *model = new QSqlQueryModel;
    model->setQuery(QString(query));

    QTableView *view = new QTableView;
    view->setWindowTitle("view table");
    view->setWindowIcon(QIcon(QLatin1String(":/mainwindow/computer.png")));
    view->setMinimumSize(1024, 600);

    view->setModel(model);

    QHeaderView *header = new QHeaderView(Qt::Horizontal);
    header->setResizeMode(QHeaderView::ResizeToContents);
    view->setHorizontalHeader(header);

    view->show();
}
//--------------------------------------------------------------------------------
bool MainBox::create_content_data(void)
{
    bool ok;
    QSqlQuery sql;

    emit info(tr("Создаем таблицу content_data"));
    sql.prepare("create table content_data ("
                "id integer primary key, "
                "published boolean, "
                "title varchar(200), "
                "content memo)");
    ok = sql.exec();
    if(!ok)
    {
        emit error(QString(tr("query [%1] not exec!")).arg(sql.lastQuery()));
        return false;
    }
    return true;
}
//--------------------------------------------------------------------------------
void MainBox::show_cookies(void)
{
    cookies->debug();
}
//--------------------------------------------------------------------------------
void MainBox::show_pages(void)
{
    if(pages.isEmpty())
    {
        emit error(tr("Нет данных"));
        return;
    }

    QTabWidget *tab = new QTabWidget;
    tab->setWindowTitle("show pages");
    tab->setWindowIcon(QIcon(QLatin1String(":/mainwindow/computer.png")));
    tab->setMinimumSize(1024, 600);

    emit info(tr("Отобразим полученные данные"));
    for(int n=0; n<pages.count(); n++)
    {
        QWidget *frame = new QWidget;
        QVBoxLayout *vbox = new QVBoxLayout;
        QLineEdit *le_title = new QLineEdit;
        QTextEdit *te_content = new QTextEdit;

        le_title->setText(pages[n].title);
        te_content->setText(pages[n].content);

        vbox->addWidget(le_title);
        vbox->addWidget(te_content);
        frame->setLayout(vbox);

        tab->addTab(frame, pages[n].url);
    }
    tab->show();
}
//--------------------------------------------------------------------------------
void MainBox::show_content_data(void)
{
    open_database("QSQLITE", "customdb.db");
    QStringList tables = db.tables();
    if(tables.isEmpty())
    {
        emit error(tr("Нет таблиц"));
        return;
    }
    view_table("SELECT * FROM content_data");
    close_database("customdb");
}
//--------------------------------------------------------------------------------
void MainBox::run(void)
{
    bool r = find_exit("http://www.home.net/svow",
                       "Выход");
    if(!r)
    {
        emit error("Exit is false");
        return;
    }

    if(open_database("QSQLITE", "customdb.db"))
        return;
    QStringList tables = db.tables();
    if(tables.isEmpty())
    {
        create_content_data();
    }
    QList<QUrl> urls_collection_opennet;
    QList<QUrl> urls_collection_securitylab;
    QSqlQuery temp_sql;

    int button = QMessageBox::question(this, tr("Коллекция ссылок"), tr("Собираем коллекцию ссылок?"), QMessageBox::Yes, QMessageBox::No);
    if(button != QMessageBox::Yes)
        return;

    emit info(tr("Собираем коллекцию ссылок"));
    pages.clear();
    //-----------------------------------------------
    urls_collection_opennet.clear();
    load_url("http://www.opennet.ru");
    QUrl baseUrl = main_frame->baseUrl();
    QWebElementCollection news_collection = main_frame->findAllElements("td[class=tnews]");
    emit info(QString(tr("Нашли %1 ссылок")).arg(news_collection.count()));
    foreach (QWebElement element, news_collection)
    {
        QWebElement link = element.findFirst(":link");
        QString href = link.attribute("href");
        if (!href.isEmpty())
        {
            QUrl relativeUrl(href);
            QUrl absoluteUrl = baseUrl.resolved(relativeUrl);

            temp_sql.exec(QString("SELECT * FROM content_data WHERE title LIKE '%1'").arg(link.toPlainText().trimmed()));
            bool result = temp_sql.first();
            if(result == false)
            {
                emit debug(link.toPlainText());
                urls_collection_opennet.append(absoluteUrl);
            }
        }
    }

    foreach (QUrl url, urls_collection_opennet)
    {
        load_url(url.toString());

        QString selectorQuery = "span[id=r_title]";
        QWebElement title = main_frame->findFirstElement(selectorQuery);
        if(title.isNull())
        {
            emit error(QString(tr("селектор %1 не найден")).arg(selectorQuery));
            return;
        }

        selectorQuery = "td[class=chtext]";
        QWebElement content = main_frame->findFirstElement(selectorQuery);
        if(content.isNull())
        {
            emit error(QString(tr("селектор %1 не найден")).arg(selectorQuery));
            return;
        }

        page pg;
        pg.url     = main_frame->url().toString();
        pg.title   = title.toPlainText().trimmed();
        pg.content = QString("%1<br><a href='%2'>Источник</a>")
                .arg(content.toInnerXml())
                .arg(pg.url);
        pages.append(pg);
    }
    if(pages.count() == 0)
    {
        emit info(tr("Новых данных нет"));
    }
    else
    {
        emit info(QString(tr("Собрали коллекцию из %1 ссылок")).arg(pages.count()));
    }
    //-----------------------------------------------
    urls_collection_securitylab.clear();
    load_url("http://www.securitylab.ru");
    baseUrl = main_frame->baseUrl();
    QWebElement main_content = main_frame->findFirstElement("div[class=main_content]");
    if(main_content.isNull())
    {
        emit error("main_content not found!");
        return;
    }
    QWebElementCollection news_h1_collection = main_content.findAll("h1");
    emit info(QString(tr("Нашли %1 ссылок")).arg(news_h1_collection.count()));
    foreach (QWebElement element, news_h1_collection)
    {
        QWebElement link = element.findFirst(":link");
        QString href = link.attribute("href");
        if (!href.isEmpty())
        {
            QUrl relativeUrl(href);
            QUrl h1_absoluteUrl = baseUrl.resolved(relativeUrl);

            temp_sql.exec(QString("SELECT * FROM content_data WHERE title LIKE '%1'").arg(link.toPlainText().trimmed()));
            bool result = temp_sql.first();
            if(result == false)
            {
                emit debug(link.toPlainText());
                urls_collection_securitylab.append(h1_absoluteUrl);
            }
        }
    }
    QWebElementCollection news_h2_collection = main_content.findAll("h2");
    emit info(QString(tr("Нашли %1 ссылок")).arg(news_h2_collection.count()));
    foreach (QWebElement element, news_h2_collection)
    {
        QWebElement link = element.findFirst(":link");
        QString href = link.attribute("href");
        if (!href.isEmpty())
        {
            QUrl relativeUrl(href);
            QUrl h2_absoluteUrl = baseUrl.resolved(relativeUrl);

            temp_sql.exec(QString("SELECT * FROM content_data WHERE title LIKE '%1'").arg(link.toPlainText().trimmed()));
            bool result = temp_sql.first();
            if(result == false)
            {
                emit debug(link.toPlainText());
                urls_collection_securitylab.append(h2_absoluteUrl);
            }
        }
    }

    foreach (QUrl url, urls_collection_securitylab)
    {
        load_url(url.toString());

        QString selectorQuery = "h1[itemprop=name]";
        QWebElement title = main_frame->findFirstElement(selectorQuery);
        if(title.isNull())
        {
            emit error(QString(tr("селектор %1 не найден")).arg(selectorQuery));
            return;
        }

        selectorQuery = "div[itemprop=articleBody]";
        QWebElement content = main_frame->findFirstElement(selectorQuery);
        if(content.isNull())
        {
            emit error(QString(tr("селектор %1 не найден")).arg(selectorQuery));
            return;
        }

        page pg;
        pg.url     = main_frame->url().toString();
        pg.title   = title.toPlainText().trimmed();
        pg.content = QString("%1<br><a href='%2'>Источник</a>")
                .arg(content.toInnerXml())
                .arg(pg.url);
        pages.append(pg);
    }
    if(pages.count() == 0)
    {
        emit info(tr("Новых данных нет"));
    }
    else
    {
        emit info(QString(tr("Собрали коллекцию из %1 ссылок")).arg(pages.count()));
    }
    //-----------------------------------------------
    if(pages.count() == 0)
    {
        emit info(tr("Новых данных нет"));
        return;
    }
    if(!db.isOpen()) db.open();
    QSqlQuery sql;
    sql.prepare("INSERT INTO content_data (id, published, title, content) "
                "VALUES (:id, :published, :title, :content)");
    for(int i=0; i<pages.count(); i++)
    {
        emit info(tr("Добавляем новые данные в БД"));
        sql.bindValue(":published", false);
        sql.bindValue(":title",   pages[i].title);
        sql.bindValue(":content", pages[i].content);
        if(sql.exec() == false)
        {
            emit debug(sql.executedQuery());
            emit error("Не удалось добавить запись!");
        }
    }
    emit info(tr("Закончили сбор"));
    //-----------------------------------------------
    QSqlTableModel model;
    model.setTable("content_data");
    model.setFilter("published = 'false'");
    bool result = model.select();
    if(result == false)
    {
        emit error(tr("Ошибка model.select()"));
        return;
    }
    //-----------------------------------------------
    emit info(tr("Сохраняем данные"));
    emit info(QString(tr("rowCount %1")).arg(model.rowCount()));
    while(model.rowCount()>0)
    {
        load_url("http://www.home.net/svow/admin/page_new");

        emit info(QString(tr("Осталось обработать %1 записей")).arg(model.rowCount()));
        emit info(QString(tr("Создаем страницу [%1]")).arg(model.record(0).value("title").toString()));
        find_radioelement_and_click("div[class='block_page page_post_type']", "2");
        find_checkboxelement_and_click("div[class='block_page page_all_cat']", "1");
        find_radioelement_and_click("div[class=page_status]", "publish");

        find_and_evaluateJavaScript("input[name=f_comment_allow]", "this.checked=false");
        find_and_evaluateJavaScript("input[name=f_feed_allow]", "this.checked=false");

        js_setByName("f_header", model.record(0).value("title").toString());

        simple_setByName("f_content", model.record(0).value("content").toString());
        //js_setByName("f_content", pages[n].content);

        js_clickByName("f_submit");

        is_loaded = false;
        wait();

        QSqlRecord record = model.record(0);
        record.setValue("published", true);
        model.setRecord(0, record);
        model.submitAll();
    }

    load_url("http://www.home.net/svow");

    view_table("SELECT * FROM content_data");
    close_database("customdb");
}
//--------------------------------------------------------------------------------
void MainBox::find_and_evaluateJavaScript(const QString &selector_element,
                                          const QString &java_script)
{
    QWebElement element = main_frame->findFirstElement(selector_element);
    if(element.isNull())
    {
        emit error("element not found");
        return;
    }
    element.evaluateJavaScript(java_script);
}
//--------------------------------------------------------------------------------
void MainBox::find_checkboxelement_and_click(const QString &selector_block,
                                             const QString &value)
{
    QWebElement radio_element = main_frame->findFirstElement(selector_block);
    if(radio_element.isNull())
    {
        emit error("block not found");
        return;
    }
    QWebElementCollection radio_collection = radio_element.findAll("input[type=checkbox]");
    foreach (QWebElement element, radio_collection)
    {
        if(element.attribute("value") == value)
        {
            element.evaluateJavaScript("this.checked=true");
            return;
        }
    }
    emit error("value not found");
}
//--------------------------------------------------------------------------------
void MainBox::find_radioelement_and_click(const QString &selector_block,
                                          const QString &value)
{
    QWebElement radio_element = main_frame->findFirstElement(selector_block);
    if(radio_element.isNull())
    {
        emit error("block not found");
        return;
    }
    QWebElementCollection radio_collection = radio_element.findAll("input[type=radio]");
    foreach (QWebElement element, radio_collection)
    {
        if(element.attribute("value") == value)
        {
            element.evaluateJavaScript("this.checked=true");
            return;
        }
    }
    emit error("value not found");
}
//--------------------------------------------------------------------------------
void MainBox::js_clickByName(const QString &name)
{
    main_frame->evaluateJavaScript(QString("document.getElementsByName('%1')[0].click();")
                                   .arg(name));
}
//--------------------------------------------------------------------------------
void MainBox::simple_clickByName(const QString &name)
{
    QWebElement submit = main_frame->findFirstElement(QString("input[name=%1]").arg(name));
    if(submit.isNull())
    {
        emit error("submit not found");
        return;
    }
    submit.evaluateJavaScript("this.click();");
}
//--------------------------------------------------------------------------------
bool MainBox::simple_setByName(const QString &name,
                               const QVariant &value,
                               bool isInnerXml)
{
    QWebElement content = main_frame->findFirstElement(QString("textarea[name=%1]").arg(name));
    if(content.isNull())
    {
        emit error("content not found");
        return false;
    }
    if(isInnerXml)
        content.setInnerXml(value.toString());
    else
        content.setOuterXml(value.toString());
    return true;
}
//--------------------------------------------------------------------------------
bool MainBox::js_setByName(const QString& name,
                           const QVariant& value)
{
    QVariant result = main_frame->evaluateJavaScript(QString("document.getElementsByName('%1')[0].value='%2';")
                                                     .arg(name)
                                                     .arg(value.toString()));
    if(result.isNull())
    {
        emit error(QString("Error in js_setByName name=[%1] value=[%2]")
                   .arg(name)
                   .arg(value.toString()));
        return false;
    }
    return true;
}
//--------------------------------------------------------------------------------
void MainBox::test_login(void)
{
    QString address("http://www.home.net/svow/login");

    load_url(address);

    is_loaded = false;
    if(js_setByName("flogin_user", "admin") == false) return;
    if(js_setByName("flogin_password", "q12345") == false) return;
    js_clickByName("flogin_submit");
    wait();
}
//--------------------------------------------------------------------------------
void MainBox::test_securitylab(void)
{
    emit info(tr("Собираем коллекцию ссылок"));

    open_database("QSQLITE", "customdb.db");
    QStringList tables = db.tables();
    if(tables.isEmpty())
    {
        create_content_data();
    }
    QList<QUrl> urls_collection;
    QSqlQuery temp_sql;

    pages.clear();
    //-----------------------------------------------
    urls_collection.clear();
    load_url("http://www.securitylab.ru");
    QUrl baseUrl = main_frame->baseUrl();
    QWebElement main_content = main_frame->findFirstElement("div[class=main_content]");
    if(main_content.isNull())
    {
        emit error("main_content not found!");
        return;
    }
    QWebElementCollection news_h1_collection = main_content.findAll("h1");
    emit info(QString(tr("Нашли %1 ссылок")).arg(news_h1_collection.count()));
    foreach (QWebElement element, news_h1_collection)
    {
        QWebElement link = element.findFirst(":link");
        QString href = link.attribute("href");
        if (!href.isEmpty())
        {
            QUrl relativeUrl(href);
            QUrl h1_absoluteUrl = baseUrl.resolved(relativeUrl);

            temp_sql.exec(QString("SELECT * FROM content_data WHERE title LIKE '%1'").arg(link.toPlainText().trimmed()));
            bool result = temp_sql.first();
            if(result == false)
            {
                emit debug(link.toPlainText());
                urls_collection.append(h1_absoluteUrl);
            }
        }
    }
    QWebElementCollection news_h2_collection = main_content.findAll("h2");
    emit info(QString(tr("Нашли %1 ссылок")).arg(news_h2_collection.count()));
    foreach (QWebElement element, news_h2_collection)
    {
        QWebElement link = element.findFirst(":link");
        QString href = link.attribute("href");
        if (!href.isEmpty())
        {
            QUrl relativeUrl(href);
            QUrl h2_absoluteUrl = baseUrl.resolved(relativeUrl);

            temp_sql.exec(QString("SELECT * FROM content_data WHERE title LIKE '%1'").arg(link.toPlainText().trimmed()));
            bool result = temp_sql.first();
            if(result == false)
            {
                emit debug(link.toPlainText());
                urls_collection.append(h2_absoluteUrl);
            }
        }
    }

    foreach (QUrl url, urls_collection)
    {
        load_url(url.toString());

        QString selectorQuery = "h1[itemprop=name]";
        QWebElement title = main_frame->findFirstElement(selectorQuery);
        if(title.isNull())
        {
            emit error(QString(tr("селектор %1 не найден")).arg(selectorQuery));
            return;
        }

        selectorQuery = "div[itemprop=articleBody]";
        QWebElement content = main_frame->findFirstElement(selectorQuery);
        if(content.isNull())
        {
            emit error(QString(tr("селектор %1 не найден")).arg(selectorQuery));
            return;
        }

        page pg;
        pg.url     = main_frame->url().toString();
        pg.title   = title.toPlainText().trimmed();
        pg.content = QString("%1<br><a href=\"%2\">Источник</a>")
                .arg(content.toInnerXml())
                .arg(pg.url);
        pages.append(pg);
    }
    if(pages.count() == 0)
    {
        emit info(tr("Новых данных нет"));
        return;
    }
    emit info(QString(tr("Собрали коллекцию из %1 ссылок")).arg(pages.count()));
    close_database("customdb");
}
//--------------------------------------------------------------------------------
void MainBox::find_and_append(void)
{
    QTime time;
    time.start();

    open_database("QSQLITE", "customdb.db");
    QSqlTableModel model;
    model.setTable("content_data");
    bool result = model.select();
    if(result == false)
    {
        emit error(tr("Ошибка model.select()"));
        return;
    }
    //-----------------------------------------------
    emit info(QString(tr("В базе %1 записей")).arg(model.rowCount()));
    for(int n=0; n<model.rowCount(); n++)
    {
        load_url("http://www.home.net/svow/", false);
        is_loaded=false;
        QString search_str=model.record(n).value("title").toString();
        //emit debug(search_str);
        //js_setByName("s", search_str.replace("/", "&frasl;"));
        js_setByName("s", search_str);
        js_clickByName("Submit");

        wait();

        QWebElementCollection main_collection = main_frame->findAllElements("div[class=main]");
        bool found = false;
        foreach (QWebElement element, main_collection)
        {
            QWebElement link = element.findFirst(":link");
            if(!link.isNull())
            {
                if(link.toPlainText() == search_str)
                {
                    found = true;
                }
            }
        }
        if(found == false)
        {
            emit error(QString(tr("[%1] нет в базе")).arg(search_str));
#if 0
            load_url("http://www.home.net/svow/admin/page_new");

            emit info(QString(tr("Создаем страницу [%1]")).arg(model.record(n).value("title").toString()));
            find_radioelement_and_click("div[class='block_page page_post_type']", "2");
            find_checkboxelement_and_click("div[class='block_page page_all_cat']", "1");
            find_radioelement_and_click("div[class=page_status]", "publish");

            find_and_evaluateJavaScript("input[name=f_comment_allow]", "this.checked=false");
            find_and_evaluateJavaScript("input[name=f_feed_allow]", "this.checked=false");

            js_setByName("f_header", model.record(n).value("title").toString().trimmed());

            simple_setByName("f_content", model.record(n).value("content").toString());
            //js_setByName("f_content", pages[n].content);

            js_clickByName("f_submit");

            is_loaded = false;
            wait();
#endif
            wait_msec(5);
        }
    }
    emit debug(QString("time.elapsed() = %1 second").arg(time.elapsed() / 1000.f));
    emit info("End!");
}
//--------------------------------------------------------------------------------
void MainBox::run_websettingbox(void)
{
    WebSettingBox *vBox = new WebSettingBox(this);
    vBox->exec();
}
//--------------------------------------------------------------------------------
void MainBox::wait_element(const QString &selector_element)
{
    while(1)
    {
        QCoreApplication::processEvents();
        QWebElement form = main_frame->findFirstElement(selector_element);
        if(!form.isNull()) break;
    }
}
//--------------------------------------------------------------------------------
void MainBox::add_linux_moy_su(void)
{
    bool r = find_exit("http://linux.moy.su",
                       "Выход");
    if(!r)
    {
        emit error("Exit is false");
        return;
    }

    int button = QMessageBox::question(this, tr("Коллекция ссылок"), tr("Заполняем linux.moy.su?"), QMessageBox::Yes, QMessageBox::No);
    if(button != QMessageBox::Yes)
        return;

    open_database("QSQLITE", "customdb.db");
    QSqlTableModel model;
    model.setTable("content_data");
    bool result = model.select();
    if(result == false)
    {
        emit error(tr("Ошибка model.select()"));
        return;
    }
    //-----------------------------------------------
    emit info(QString(tr("rowCount %1")).arg(model.rowCount()));
    for(int n=0; n<model.rowCount(); n++)
    {
        QString title = model.record(n).value("title").toString();
        QString content = model.record(n).value("content").toString();
        if(title.isEmpty()) return;
        if(content.isEmpty()) return;

        load_url("http://linux.moy.su/news/0-0-0-0-1");
        //js_clickByName("html_message");
        //find_checkboxelement_and_click("div[id=txtPart555message]", "1");

        js_setByName("title", title);

        content = html_to_bbcode(content);

        simple_setByName("message", content);

        js_clickByName("sbm");

        wait_element("div[class=myWinSuccess]");
    }
    load_url("http://www.home.net/svow");

    close_database("customdb");
    emit info("End!");
}
//--------------------------------------------------------------------------------
void MainBox::test(QUrl url)
{
    ui->webView->load(url);
}
//--------------------------------------------------------------------------------
void MainBox::replyFinished(QNetworkReply *reply)
{
    emit info(reply->header(QNetworkRequest::ContentTypeHeader).toString());
    emit info(reply->header(QNetworkRequest::ContentLengthHeader).toString());
    emit info(reply->header(QNetworkRequest::LocationHeader).toString());
    emit info(reply->header(QNetworkRequest::LastModifiedHeader).toString());
    emit info(reply->header(QNetworkRequest::CookieHeader).toString());
    emit info(reply->header(QNetworkRequest::SetCookieHeader).toString());
    emit debug("replyFinished");
    QXmlStreamReader xml(reply->readAll());
    while (!xml.atEnd())
    {
        emit debug(xml.name().toString());
        xml.readNext();
    }
    is_loaded = true;
}
//--------------------------------------------------------------------------------
void MainBox::test(void)
{
#if 0
    QNetworkRequest request;
    //request.setUrl(QUrl("http://whoer.net/"));
    request.setUrl(QUrl("http://leader.ru/secure/who.html"));
    request.setRawHeader("User-Agent", "MyOwnBrowser 1.0");
    ui->webView->load(request);
#endif

#if 0
    QNetworkAccessManager *manager = new QNetworkAccessManager(this);
    connect(manager, SIGNAL(finished(QNetworkReply*)), this, SLOT(replyFinished(QNetworkReply*)));

    is_loaded = false;
    manager->get(QNetworkRequest(QUrl("http://www.home.net/svow/")));
    wait();
    //manager->
#endif

#if 0
    QUrl url("http://www.goggle.com");
    url.addQueryItem("a", "1");
    url.addQueryItem("b", "2");
    url.addQueryItem("c", "3");
    emit debug(url.toString());
    emit debug(url.host());
#endif

#if 1
    load_url("https://www.google.ru/");
    load_url("https://www.google.ru/");
    is_loaded = false;
    js_setByName("q", tr("пластиковые окна"));
    js_clickByName("btnG");
    wait();

    QWebElement main_content = main_frame->findFirstElement("div[id=search]");
    if(main_content.isNull())
    {
        emit error("main_content not found!");
        return;
    }

    QUrl baseUrl = main_frame->baseUrl();
    QWebElementCollection search_collection = main_content.findAll("h3");
    emit info(QString(tr("Нашли %1 ссылок")).arg(search_collection.count()));
    if(search_collection.count() != 0)
    {
        foreach (QWebElement element, search_collection)
        {
            QWebElement link = element.findFirst(":link");
            QString href = link.attribute("href");
            if (!href.isEmpty())
            {
                //QUrl relativeUrl(href);
                //QUrl absoluteUrl = baseUrl.resolved(relativeUrl);
                //emit info(element.toPlainText());
                //emit debug(absoluteUrl.toString());
                QString data = href.remove("https://www.google.ru/url?q=");
                QString host = QUrl(data).host();
                emit debug(host);
                if((host != "www.google.ru") && (host != "maps.google.ru"))
                {
                    load_url("https://www.google.ru/", false);
                    is_loaded = false;
                    js_setByName("q", QString(tr("site:%1")).arg(host));
                    js_clickByName("btnG");
                    wait();
                    QWebElement element = main_frame->findFirstElement("div[id=resultStats]");
                    if(element.isNull() == false)
                    {
                        emit debug(QString("host [%1] %2")
                                   .arg(host)
                                   .arg(element.toPlainText()));
                    }
                }
            }
        }
    }
    emit info("The end!");

#endif

#if 0
        QString str = "   a b  c    dcccc fgdfg     dfhdfhh  ";
        emit debug(QString("[%1]").arg(str));
        emit debug(QString("[%1]").arg(str.simplified()));
#endif

#if 0
        load_url("http://www.smartmoney.com/quote/ibm/?story=snapshot&symbol=ibm");
        QWebElementCollection collection = main_frame->findAllElements("span[smfield=price]");
        emit info(QString(tr("Нашли %1 элементов")).arg(collection.count()));
        QWebElement element = collection.first();
        emit info(element.toPlainText());
#endif

#if 0
        //load_url("http://plastikovyeokna-krasnodar.ru/");
        load_url("http://tigral.ru/");
        QWebElementCollection collection = main_frame->findAllElements("*");
        emit info(QString(tr("Нашли %1 элементов [*]")).arg(collection.count()));
        QStringListModel *model = new QStringListModel;
        QStringList sl;
        QListView *view = new QListView;
        int cnt = 0;
        foreach (QWebElement element, collection)
        {
            QString tag = element.tagName();
            sl.append(tag);
            QString text = element.toPlainText().simplified();
            bool ok = text.contains("пластиковые окна", Qt::CaseInsensitive);
            if(ok)
            {
                emit info(tag);
                cnt++;
            }
            //        QStringList sl = element.attributeNames();
            //        foreach (QString name, sl)
            //        {
            //            if(!name.isEmpty())
            //                emit debug(name);
            //        }
        }
        emit debug(QString(tr("count %1")).arg(cnt));
        sl.sort();
        model->setStringList(sl);
        view->setModel(model);
        view->show();
#endif

#if 0
        QTime time;
        int timeout = 60;

        emit debug(QString(tr("start test %1 sec")).arg(timeout));
        time.start();
        for(int n=0; n<timeout; n++)
        {
            //emit debug(QString(tr("Прошло %1 секунд")).arg(n));
            wait_sec(1);
        }
        emit debug(QString(tr("Прошло %1 милисекунд")).arg(time.elapsed()));
#endif

#if 0
        load_url("https://www.google.ru/");
        load_url("https://www.google.ru/");
        is_loaded = false;
        //js_setByName("q", tr("пластиковые окна"));
        //js_setByName("q", tr("site:plastikovyeokna-krasnodar.ru"));
        //js_setByName("q", tr("site:tigral.ru"));
        js_setByName("q", tr("site:okoshkino.ru"));
        js_clickByName("btnG");
        wait();
        QWebElement element = main_frame->findFirstElement("div[id=resultStats]");
        if(element.isNull() == false)
            emit debug(element.toPlainText());
#endif

#if 0
        FindLinks *find = new FindLinks(main_frame, this);
        find->exec();
#endif
    }
    //--------------------------------------------------------------------------------
    QString MainBox::html_to_bbcode(const QString &data)
    {
        QString content = data;
        content = content.replace("<",      "[");
        content = content.replace(">",      "]");
        content = content.replace("a href", "url");
        content = content.replace("/a",     "/url");
        content = content.replace("\"",     "");
        content = content.replace("[p]",    "");
        content = content.replace("[/p]",   "");
        content = content.replace("[center]",   "[c]");
        content = content.replace("[/center]",  "[/c]");
        content = content.replace("[left]",     "[l]");
        content = content.replace("[/left]",    "[/l]");
        content = content.replace("[right]",    "[r]");
        content = content.replace("[/right]",   "[/r]");
        content = content.replace("'",      "");
        return content;
    }
    //--------------------------------------------------------------------------------
    //prependOutside
    //--------------------------------------------------------------------------------
    bool MainBox::find_exit(const QString &address,
                            const QString &exit_string)
    {
        load_url(address);
        QWebElementCollection links_collection = main_frame->findAllElements(":link");
        emit debug(QString("count %1").arg(links_collection.count()));
        foreach (QWebElement element, links_collection)
        {
            if(element.toPlainText().toLower() == exit_string.toLower())
            {
                return true;
            }
        }
        return false;
    }
    //--------------------------------------------------------------------------------
