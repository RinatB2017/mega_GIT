//struct rfc_CMD_PROP_RADIO_DIV_SETUP_s {
//   uint16_t commandNo;                  //!<        The command ID number 0x3807
//   uint16_t status;                     //!< \brief An integer telling the status of the command. This value is
//                                        //!<        updated by the radio CPU during operation and may be read by the
//                                        //!<        system CPU at any time.
//   rfc_radioOp_t *pNextOp;              //!<        Pointer to the next operation to run after this operation is done
//   ratmr_t startTime;                   //!<        Absolute or relative start time (depending on the value of <code>startTrigger</code>)
//   struct {
//      uint8_t triggerType:4;            //!<        The type of trigger
//      uint8_t bEnaCmd:1;                //!< \brief 0: No alternative trigger command<br>
//                                        //!<        1: CMD_TRIGGER can be used as an alternative trigger
//      uint8_t triggerNo:2;              //!<        The trigger number of the CMD_TRIGGER command that triggers this action
//      uint8_t pastTrig:1;               //!< \brief 0: A trigger in the past is never triggered, or for start of commands, give an error<br>
//                                        //!<        1: A trigger in the past is triggered as soon as possible
//   } startTrigger;                      //!<        Identification of the trigger that starts the operation
//   struct {
//      uint8_t rule:4;                   //!<        Condition for running next command: Rule for how to proceed
//      uint8_t nSkip:4;                  //!<        Number of skips + 1 if the rule involves skipping. 0: same, 1: next, 2: skip next, ...
//   } condition;
//   struct {
//      uint16_t modType:3;               //!< \brief 0: FSK<br>
//                                        //!<        1: GFSK<br>
//                                        //!<        Others: <i>Reserved</i>
//      uint16_t deviation:13;            //!<        Deviation (250 Hz steps)
//   } modulation;
//   struct {
//      uint32_t preScale:4;              //!<        Prescaler value
//      uint32_t :4;
//      uint32_t rateWord:21;             //!<        Rate word
//      uint32_t decimMode:3;             //!< \brief 0: Use automatic PDIF decimation<br>
//                                        //!<        1: Force PDIF decimation to 0<br>
//                                        //!<        3: Force PDIF decimation to 1<br>
//                                        //!<        5: Force PDIF decimation to 2<br>
//                                        //!<        Others: <i>Reserved</i>
//   } symbolRate;                        //!<        Symbol rate setting
//   uint8_t rxBw;                        //!<        Receiver bandwidth
//   struct {
//      uint8_t nPreamBytes:6;            //!< \brief 0: 1 preamble bit<br>
//                                        //!<        1--16: Number of preamble bytes<br>
//                                        //!<        18, 20, ..., 30: Number of preamble bytes<br>
//                                        //!<        31: 4 preamble bits<br>
//                                        //!<        32: 32 preamble bytes<br>
//                                        //!<        Others: <i>Reserved</i>
//      uint8_t preamMode:2;              //!< \brief 0: Send 0 as the first preamble bit<br>
//                                        //!<        1: Send 1 as the first preamble bit<br>
//                                        //!<        2: Send same first bit in preamble and sync word<br>
//                                        //!<        3: Send different first bit in preamble and sync word
//   } preamConf;
//   struct {
//      uint16_t nSwBits:6;               //!<        Number of sync word bits (8--32)
//      uint16_t bBitReversal:1;          //!< \brief 0: Use positive deviation for 1<br>
//                                        //!<        1: Use positive deviation for 0
//      uint16_t bMsbFirst:1;             //!< \brief 0: Least significant bit transmitted first<br>
//                                        //!<        1: Most significant bit transmitted first
//      uint16_t fecMode:4;               //!< \brief Select coding<br>
//                                        //!<        0: Uncoded binary modulation<br>
//                                        //!<        8: Long range mode<br>
//                                        //!<        10: Manchester coded binary modulation<br>
//                                        //!<        Others: <i>Reserved</i>
//      uint16_t :1;
//      uint16_t whitenMode:3;            //!< \brief 0: No whitening<br>
//                                        //!<        1: CC1101/CC2500 compatible whitening<br>
//                                        //!<        2: PN9 whitening without byte reversal<br>
//                                        //!<        3: <i>Reserved</i><br>
//                                        //!<        4: No whitener, 32-bit IEEE 802.15.4g compatible CRC<br>
//                                        //!<        5: IEEE 802.15.4g compatible whitener and 32-bit CRC<br>
//                                        //!<        6: No whitener, dynamically IEEE 802.15.4g compatible 16-bit or 32-bit CRC<br>
//                                        //!<        7: Dynamically IEEE 802.15.4g compatible whitener and 16-bit or 32-bit CRC
//   } formatConf;
//   struct {
//      uint16_t frontEndMode:3;          //!< \brief 0x00: Differential mode<br>
//                                        //!<        0x01: Single-ended mode RFP<br>
//                                        //!<        0x02: Single-ended mode RFN<br>
//                                        //!<        0x05 Single-ended mode RFP with external frontend control on RF pins (RFN and RXTX)<br>
//                                        //!<        0x06 Single-ended mode RFN with external frontend control on RF pins (RFP and RXTX)<br>
//                                        //!<        Others: <i>Reserved</i>
//      uint16_t biasMode:1;              //!< \brief 0: Internal bias<br>
//                                        //!<        1: External bias
//      uint16_t analogCfgMode:6;         //!< \brief 0x00: Write analog configuration.<br>
//                                        //!<        Required first time after boot and when changing frequency band
//                                        //!<        or front-end configuration<br>
//                                        //!<        0x2D: Keep analog configuration.<br>
//                                        //!<        May be used after standby or when changing mode with the same frequency
//                                        //!<        band and front-end configuration<br>
//                                        //!<        Others: <i>Reserved</i>
//      uint16_t bNoFsPowerUp:1;          //!< \brief 0: Power up frequency synth<br>
//                                        //!<        1: Do not power up frequency synth
//   } config;                            //!<        Configuration options
//   uint16_t txPower;                    //!<        Transmit power
//   uint32_t* pRegOverride;              //!< \brief Pointer to a list of hardware and configuration registers to override. If NULL, no
//                                        //!<        override is used.
//   uint16_t centerFreq;                 //!< \brief Center frequency of the frequency band used, in MHz; used for calculating some internal TX and RX parameters.
//                                        //!<        For a single channel RF system, this should be set equal to the RF frequency used.
//                                        //!<        For a multi channel RF system (e.g. frequency hopping spread spectrum), this should be set equal
//                                        //!<        to the center frequency of the frequency band used.
//   int16_t intFreq;                     //!< \brief Intermediate frequency to use for RX, in MHz on 4.12 signed format. TX will use same
//                                        //!<        intermediate frequency if supported, otherwise 0.<br>
//                                        //!<        0x8000: Use default.
//   uint8_t loDivider;                   //!<        LO frequency divider setting to use. Supported values: 2 (CC1350 only), 5, 6, 10, 12, 15, and 30
//};

//typedef struct {
//    uint32_t            nInactivityTimeout;      ///< Inactivity timeout in microseconds.
//                                                 ///< The default value is 0xFFFFFFFF (infinite).

//    uint32_t            nPowerUpDuration;        ///< A custom power-up duration in microseconds.
//                                                 ///< If 0, the RF driver will start with a conservative value and measure the actual time during the first power-up.
//                                                 ///< The default value is 0.

//    RF_Callback         pPowerCb;                ///< \deprecated Power up callback, will be removed future versions, see RF_Params::pClienteventCb instead.
//                                                 ///< The default value is NULL.

//    RF_Callback         pErrCb;                  ///< \deprecated Callback function for driver error events.

//    uint16_t            nPowerUpDurationMargin;  ///< An additional safety margin to be added to #RF_Params::nPowerUpDuration.
//                                                 ///< This is necessary because of other hardware and software interrupts
//                                                 ///< preempting the RF driver interrupt handlers and state machine.
//                                                 ///< The default value is platform-dependent.

//    uint16_t            nPhySwitchingDurationMargin; ///< An additional safety margin to be used to calculate when conflicts shall be evaluated run-time.

//    RF_ClientCallback   pClientEventCb;          ///< Callback function for client-related events.
//                                                 ///< The default value is NULL.

//    RF_ClientEventMask  nClientEventMask;        ///< Event mask used to subscribe certain client events.
//                                                 ///< The purpose is to keep the number of callback executions small.
//} RF_Params;
//--------------------------------------------------------
#ifdef Q_OS_LINUX
    syslog(LOG_EMERG,   "LOG_EMERG");
    syslog(LOG_ALERT,   "LOG_ALERT");
    syslog(LOG_CRIT,    "LOG_CRIT");
    syslog(LOG_ERR,     "LOG_ERR");
    syslog(LOG_WARNING, "LOG_WARNING");
    syslog(LOG_NOTICE,  "LOG_NOTICE");
    syslog(LOG_INFO,    "LOG_INFO");
    syslog(LOG_DEBUG,   "LOG_DEBUG");
#endif
//--------------------------------------------------------
#include <windows.h>

#define VER_FILEVERSION             1,0,0,0
#define VER_FILEVERSION_STR         "1.0.0.0\0"
#define VER_PRODUCTVERSION          1,0,0
#define VER_PRODUCTVERSION_STR      "1.0.0\0"
#define VER_FILEDESCRIPTION_STR     "HelloWorld"
#define VER_INTERNALNAME_STR        "Sensor"
#define VER_LEGALCOPYRIGHT_STR      "Copyright (C) 2015, MyCompany"
#define VER_ORIGINALFILENAME_STR    "HelloWorld.exe"
#define VER_PRODUCTNAME_STR         "Hello World"

VS_VERSION_INFO VERSIONINFO
FILEVERSION     VER_FILEVERSION
PRODUCTVERSION  VER_PRODUCTVERSION
BEGIN
    BLOCK "StringFileInfo"
    BEGIN
        BLOCK "040904E4"
        BEGIN
            VALUE "FileDescription",    VER_FILEDESCRIPTION_STR
            VALUE "FileVersion",        VER_FILEVERSION_STR
            VALUE "InternalName",       VER_INTERNALNAME_STR
            VALUE "LegalCopyright",     VER_LEGALCOPYRIGHT_STR
            VALUE "OriginalFilename",   VER_ORIGINALFILENAME_STR
            VALUE "ProductName",        VER_PRODUCTNAME_STR
            VALUE "ProductVersion",     VER_PRODUCTVERSION_STR
        END
    END

    BLOCK "VarFileInfo"
    BEGIN
        VALUE "Translation", 0x409, 1252
    END
END
