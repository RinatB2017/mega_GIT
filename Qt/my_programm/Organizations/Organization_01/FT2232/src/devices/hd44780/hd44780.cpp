/*********************************************************************************
**                                                                              **
**     Copyright (C) 2012                                                       **
**                                                                              **
**     This program is free software: you can redistribute it and/or modify     **
**     it under the terms of the GNU General Public License as published by     **
**     the Free Software Foundation, either version 3 of the License, or        **
**     (at your option) any later version.                                      **
**                                                                              **
**     This program is distributed in the hope that it will be useful,          **
**     but WITHOUT ANY WARRANTY; without even the implied warranty of           **
**     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            **
**     GNU General Public License for more details.                             **
**                                                                              **
**     You should have received a copy of the GNU General Public License        **
**     along with this program.  If not, see http://www.gnu.org/licenses/.      **
**                                                                              **
**********************************************************************************
**                   Author: Bikbao Rinat Zinorovich                            **
**********************************************************************************/
#include "ft2232h.hpp"
#include "hd44780.hpp"
#include "sleeper.h"
//--------------------------------------------------------------------------------
#ifdef QT_DEBUG
#   include <QDebug>
#endif
//--------------------------------------------------------------------------------
/*
http://easyelectronics.ru/avr-uchebnyj-kurs-podklyuchenie-k-avr-lcd-displeya-hd44780.html
Типовой 14ти пиновый интерфейс дисплеев на HD44780:

    1.  Земля, общий провод, GND
    2.  Напряжение питания, Vcc (+5V)
    3.  Настройка контрастности (Vo) - 0
    4.  Выбор регистра (R/S для HD44780, A0 для KS0066) - определяет что у нас передается, команда (RS=0) или данные (RS=1).
                                                          Данные будут записаны в память по текущему адресу, а команда исполнена контроллером.
    5.  Чтение/запись (R/W) - 1/0
    6.  Строб по спаду (Enable)
    7.  Bit 0 (младший для 8-битного интерфейса)
    8.  Bit 1
    9.  Bit 2
    10. Bit 3
    11. Bit 4 (младший для 4-битного интерфейса)
    12. Bit 5
    13. Bit 6
    14. Bit 7 (старший для 8ми (4х) битного интерфейса)
    15. Питание подсветки для дисплеев с подсветкой (анод)
    16. Питание подсветки для дисплеев с подсветкой (катод)

Дисплей может работать в 4-х или 8-ми битном режимах.
В первом случае пины с седьмого по десятый не используются,
а данные передаются через 11 — 14 пины, по четыре бита за такт
(старший полу-байт, затем младший полу-байт).

DB7	DB6	DB5	DB4	DB3	DB2	DB1	DB0	Значение
0	0	0	0	0	0	0	1	Очистка экрана. Счетчик адреса на 0 позицию DDRAM
0	0	0	0	0	0	1	-	Адресация на DDRAM сброс сдвигов, Счетчик адреса на 0
0	0	0	0	0	1	I/D	S	Настройка сдвига экрана и курсора
0	0	0	0	1	D	C	B	Настройка режима отображения
0	0	0	1	S/C	R/L	-	-	Сдвиг курсора или экрана, в зависимости от битов
0	0	1	DL	N	F	-	-	Выбор числа линий, ширины шины и размера символа
0	1	AG	AG	AG	AG	AG	AG	Переключить адресацию на SGRAM и задать адрес в SGRAM
1	AD	AD	AD	AD	AD	AD	AD	Переключить адресацию на DDRAM и задать адрес в DDRAM

I/D — инкремент или декремент счетчика адреса. По дефолту стоит 0 — Декремент. Т.е. каждый следующий байт будет записан в n-1 ячейку. Если поставить 1 — будет Инкремент.
S - сдвиг экрана, если поставить 1 то с каждым новым символом будет сдвигаться окно экрана, пока не достигнет конца DDRAM, наверное удобно будет когда выводишь на экран здоровенную строку, на все 40 символов, чтобы не убегала за экран.
D — включить дисплей. Если поставить туда 0 то изображение исчезнет, а мы в это время можем в видеопамяти творить всякие непотребства и они не будут мозолить глаза. А чтобы картинка появилась в эту позицию надо записать 1.
С - включить курсор в виде прочерка. Все просто, записали сюда 1 — включился курсор.
B — сделать курсор в виде мигающего черного квадрата.
S/C сдвиг курсора или экрана. Если стоит 0, то сдвигается курсор. Если 1, то экран. По одному разу за команду
R/L — определяет направление сдвига курсора и экрана. 0 — влево, 1 — вправо.
D/L — бит определяющий ширину шины данных. 1-8 бит, 0-4 бита
N — число строк. 0 — одна строка, 1 — две строки.
F - размер символа 0 — 5х8 точек. 1 — 5х10 точек (встречается крайне редко)
AG - адрес в памяти CGRAM
АD — адрес в памяти DDRAM
*/
//--------------------------------------------------------------------------------
union B_BYTE
{
    unsigned char value;
    struct
    {
        unsigned bit0:1;
        unsigned bit1:1;
        unsigned bit2:1;
        unsigned bit3:1;
        unsigned bit4:1;
        unsigned bit5:1;
        unsigned bit6:1;
        unsigned bit7:1;
    } bites;
};

union D_BYTE
{
    unsigned char value;
    struct
    {
        unsigned a:4;
        unsigned b:4;
    } decades;
};
//--------------------------------------------------------------------------------
HD44780::HD44780(I2C_Freq freq, QWidget *parent) :
    MyWidget(parent)
{
    ft2232h = new FT2232H(freq, parent);
}
//--------------------------------------------------------------------------------
HD44780::~HD44780()
{
    ft2232h->close();
    ft2232h->deleteLater();
    close();
}
//--------------------------------------------------------------------------------
void HD44780::test(void)
{

}
//--------------------------------------------------------------------------------
bool HD44780::open(int deviceNumber)
{
    return ft2232h->open(deviceNumber);
}
//--------------------------------------------------------------------------------
void HD44780::close(void)
{
    ft2232h->close();
}
//--------------------------------------------------------------------------------
void HD44780::screen_on(void)
{
    ft2232h->clear_data();
    //ft2232h->append_data(???);
    ft2232h->write_data();
}
//--------------------------------------------------------------------------------
void HD44780::screen_off(void)
{
    ft2232h->clear_data();
    //ft2232h->append_data(???);
    ft2232h->write_data();
}
//--------------------------------------------------------------------------------
void HD44780::clear(void)
{
    ft2232h->clear_data();
    //ft2232h->append_data(???);
    ft2232h->write_data();
}
//--------------------------------------------------------------------------------
void HD44780::move_cursor(void)
{
    ft2232h->clear_data();
    //ft2232h->append_data(???);
    ft2232h->write_data();
}
//--------------------------------------------------------------------------------
void HD44780::write(unsigned char data)
{
    ft2232h->clear_data();
    ft2232h->append_data(data);
    ft2232h->write_data();
}
//--------------------------------------------------------------------------------
void HD44780::strobe(void)
{
    ft2232h->clear_data();
    //ft2232h->append_data(???);
    ft2232h->write_data();
}
//--------------------------------------------------------------------------------
void HD44780::updateText(void)
{

}
//--------------------------------------------------------------------------------
