/* soapRecordingBindingService.cpp
   Generated by gSOAP 2.8.17r from onvif.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapRecordingBindingService.h"

RecordingBindingService::RecordingBindingService()
{	RecordingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RecordingBindingService::RecordingBindingService(const struct soap &_soap) : soap(_soap)
{ }

RecordingBindingService::RecordingBindingService(soap_mode iomode)
{	RecordingBindingService_init(iomode, iomode);
}

RecordingBindingService::RecordingBindingService(soap_mode imode, soap_mode omode)
{	RecordingBindingService_init(imode, omode);
}

RecordingBindingService::~RecordingBindingService()
{ }

void RecordingBindingService::RecordingBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
	{"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
	{"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
	{"wsc", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL, NULL},
	{"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
	{"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
	{"wsa", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL, NULL},
	{"wsdd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
	{"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
	{"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
	{"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
	{"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
	{"tdn", "http://www.onvif.org/ver10/network/wsdl", NULL, NULL},
	{"tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
	{"tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
	{"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
	{"timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
	{"tls", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL},
	{"tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
	{"tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
	{"trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
	{"trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL},
	{"trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
	{"trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
	{"tse", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void RecordingBindingService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void RecordingBindingService::reset()
{	destroy();
	soap_done(this);
	soap_initialize(this);
	RecordingBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
RecordingBindingService *RecordingBindingService::copy()
{	RecordingBindingService *dup = SOAP_NEW_COPY(RecordingBindingService(*(struct soap*)this));
	return dup;
}
#endif

int RecordingBindingService::soap_close_socket()
{	return soap_closesock(this);
}

int RecordingBindingService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int RecordingBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int RecordingBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int RecordingBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int RecordingBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void RecordingBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void RecordingBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *RecordingBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void RecordingBindingService::soap_noheader()
{	this->header = NULL;
}

void RecordingBindingService::soap_header(struct _wsse__Security *wsse__Security, char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct wsdd__AppSequenceType *wsdd__AppSequence, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance)
{	::soap_header(this);
	this->header->wsse__Security = wsse__Security;
	this->header->wsa__MessageID = wsa__MessageID;
	this->header->wsa__RelatesTo = wsa__RelatesTo;
	this->header->wsa__From = wsa__From;
	this->header->wsa__ReplyTo = wsa__ReplyTo;
	this->header->wsa__FaultTo = wsa__FaultTo;
	this->header->wsa__To = wsa__To;
	this->header->wsa__Action = wsa__Action;
	this->header->wsdd__AppSequence = wsdd__AppSequence;
	this->header->wsa5__MessageID = wsa5__MessageID;
	this->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->header->wsa5__From = wsa5__From;
	this->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->header->wsa5__FaultTo = wsa5__FaultTo;
	this->header->wsa5__To = wsa5__To;
	this->header->wsa5__Action = wsa5__Action;
	this->header->chan__ChannelInstance = chan__ChannelInstance;
}

const SOAP_ENV__Header *RecordingBindingService::soap_header()
{	return this->header;
}

int RecordingBindingService::run(int port)
{	if (soap_valid_socket(this->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->error;
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET RecordingBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET RecordingBindingService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int RecordingBindingService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif

int RecordingBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___trc__GetServiceCapabilities(RecordingBindingService*);
static int serve___trc__CreateRecording(RecordingBindingService*);
static int serve___trc__DeleteRecording(RecordingBindingService*);
static int serve___trc__GetRecordings(RecordingBindingService*);
static int serve___trc__SetRecordingConfiguration(RecordingBindingService*);
static int serve___trc__GetRecordingConfiguration(RecordingBindingService*);
static int serve___trc__GetRecordingOptions(RecordingBindingService*);
static int serve___trc__CreateTrack(RecordingBindingService*);
static int serve___trc__DeleteTrack(RecordingBindingService*);
static int serve___trc__GetTrackConfiguration(RecordingBindingService*);
static int serve___trc__SetTrackConfiguration(RecordingBindingService*);
static int serve___trc__CreateRecordingJob(RecordingBindingService*);
static int serve___trc__DeleteRecordingJob(RecordingBindingService*);
static int serve___trc__GetRecordingJobs(RecordingBindingService*);
static int serve___trc__SetRecordingJobConfiguration(RecordingBindingService*);
static int serve___trc__GetRecordingJobConfiguration(RecordingBindingService*);
static int serve___trc__SetRecordingJobMode(RecordingBindingService*);
static int serve___trc__GetRecordingJobState(RecordingBindingService*);

int RecordingBindingService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "trc:GetServiceCapabilities"))
		return serve___trc__GetServiceCapabilities(this);
	if (!soap_match_tag(this, this->tag, "trc:CreateRecording"))
		return serve___trc__CreateRecording(this);
	if (!soap_match_tag(this, this->tag, "trc:DeleteRecording"))
		return serve___trc__DeleteRecording(this);
	if (!soap_match_tag(this, this->tag, "trc:GetRecordings"))
		return serve___trc__GetRecordings(this);
	if (!soap_match_tag(this, this->tag, "trc:SetRecordingConfiguration"))
		return serve___trc__SetRecordingConfiguration(this);
	if (!soap_match_tag(this, this->tag, "trc:GetRecordingConfiguration"))
		return serve___trc__GetRecordingConfiguration(this);
	if (!soap_match_tag(this, this->tag, "trc:GetRecordingOptions"))
		return serve___trc__GetRecordingOptions(this);
	if (!soap_match_tag(this, this->tag, "trc:CreateTrack"))
		return serve___trc__CreateTrack(this);
	if (!soap_match_tag(this, this->tag, "trc:DeleteTrack"))
		return serve___trc__DeleteTrack(this);
	if (!soap_match_tag(this, this->tag, "trc:GetTrackConfiguration"))
		return serve___trc__GetTrackConfiguration(this);
	if (!soap_match_tag(this, this->tag, "trc:SetTrackConfiguration"))
		return serve___trc__SetTrackConfiguration(this);
	if (!soap_match_tag(this, this->tag, "trc:CreateRecordingJob"))
		return serve___trc__CreateRecordingJob(this);
	if (!soap_match_tag(this, this->tag, "trc:DeleteRecordingJob"))
		return serve___trc__DeleteRecordingJob(this);
	if (!soap_match_tag(this, this->tag, "trc:GetRecordingJobs"))
		return serve___trc__GetRecordingJobs(this);
	if (!soap_match_tag(this, this->tag, "trc:SetRecordingJobConfiguration"))
		return serve___trc__SetRecordingJobConfiguration(this);
	if (!soap_match_tag(this, this->tag, "trc:GetRecordingJobConfiguration"))
		return serve___trc__GetRecordingJobConfiguration(this);
	if (!soap_match_tag(this, this->tag, "trc:SetRecordingJobMode"))
		return serve___trc__SetRecordingJobMode(this);
	if (!soap_match_tag(this, this->tag, "trc:GetRecordingJobState"))
		return serve___trc__GetRecordingJobState(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___trc__GetServiceCapabilities(RecordingBindingService *soap)
{	struct __trc__GetServiceCapabilities soap_tmp___trc__GetServiceCapabilities;
	_trc__GetServiceCapabilitiesResponse trc__GetServiceCapabilitiesResponse;
	trc__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___trc__GetServiceCapabilities(soap, &soap_tmp___trc__GetServiceCapabilities);
	if (!soap_get___trc__GetServiceCapabilities(soap, &soap_tmp___trc__GetServiceCapabilities, "-trc:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetServiceCapabilities(soap_tmp___trc__GetServiceCapabilities.trc__GetServiceCapabilities, &trc__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__GetServiceCapabilitiesResponse.soap_put(soap, "trc:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__GetServiceCapabilitiesResponse.soap_put(soap, "trc:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__CreateRecording(RecordingBindingService *soap)
{	struct __trc__CreateRecording soap_tmp___trc__CreateRecording;
	_trc__CreateRecordingResponse trc__CreateRecordingResponse;
	trc__CreateRecordingResponse.soap_default(soap);
	soap_default___trc__CreateRecording(soap, &soap_tmp___trc__CreateRecording);
	if (!soap_get___trc__CreateRecording(soap, &soap_tmp___trc__CreateRecording, "-trc:CreateRecording", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->CreateRecording(soap_tmp___trc__CreateRecording.trc__CreateRecording, &trc__CreateRecordingResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__CreateRecordingResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__CreateRecordingResponse.soap_put(soap, "trc:CreateRecordingResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__CreateRecordingResponse.soap_put(soap, "trc:CreateRecordingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__DeleteRecording(RecordingBindingService *soap)
{	struct __trc__DeleteRecording soap_tmp___trc__DeleteRecording;
	_trc__DeleteRecordingResponse trc__DeleteRecordingResponse;
	trc__DeleteRecordingResponse.soap_default(soap);
	soap_default___trc__DeleteRecording(soap, &soap_tmp___trc__DeleteRecording);
	if (!soap_get___trc__DeleteRecording(soap, &soap_tmp___trc__DeleteRecording, "-trc:DeleteRecording", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->DeleteRecording(soap_tmp___trc__DeleteRecording.trc__DeleteRecording, &trc__DeleteRecordingResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__DeleteRecordingResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__DeleteRecordingResponse.soap_put(soap, "trc:DeleteRecordingResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__DeleteRecordingResponse.soap_put(soap, "trc:DeleteRecordingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__GetRecordings(RecordingBindingService *soap)
{	struct __trc__GetRecordings soap_tmp___trc__GetRecordings;
	_trc__GetRecordingsResponse trc__GetRecordingsResponse;
	trc__GetRecordingsResponse.soap_default(soap);
	soap_default___trc__GetRecordings(soap, &soap_tmp___trc__GetRecordings);
	if (!soap_get___trc__GetRecordings(soap, &soap_tmp___trc__GetRecordings, "-trc:GetRecordings", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetRecordings(soap_tmp___trc__GetRecordings.trc__GetRecordings, &trc__GetRecordingsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__GetRecordingsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__GetRecordingsResponse.soap_put(soap, "trc:GetRecordingsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__GetRecordingsResponse.soap_put(soap, "trc:GetRecordingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__SetRecordingConfiguration(RecordingBindingService *soap)
{	struct __trc__SetRecordingConfiguration soap_tmp___trc__SetRecordingConfiguration;
	_trc__SetRecordingConfigurationResponse trc__SetRecordingConfigurationResponse;
	trc__SetRecordingConfigurationResponse.soap_default(soap);
	soap_default___trc__SetRecordingConfiguration(soap, &soap_tmp___trc__SetRecordingConfiguration);
	if (!soap_get___trc__SetRecordingConfiguration(soap, &soap_tmp___trc__SetRecordingConfiguration, "-trc:SetRecordingConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->SetRecordingConfiguration(soap_tmp___trc__SetRecordingConfiguration.trc__SetRecordingConfiguration, &trc__SetRecordingConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__SetRecordingConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__SetRecordingConfigurationResponse.soap_put(soap, "trc:SetRecordingConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__SetRecordingConfigurationResponse.soap_put(soap, "trc:SetRecordingConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__GetRecordingConfiguration(RecordingBindingService *soap)
{	struct __trc__GetRecordingConfiguration soap_tmp___trc__GetRecordingConfiguration;
	_trc__GetRecordingConfigurationResponse trc__GetRecordingConfigurationResponse;
	trc__GetRecordingConfigurationResponse.soap_default(soap);
	soap_default___trc__GetRecordingConfiguration(soap, &soap_tmp___trc__GetRecordingConfiguration);
	if (!soap_get___trc__GetRecordingConfiguration(soap, &soap_tmp___trc__GetRecordingConfiguration, "-trc:GetRecordingConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetRecordingConfiguration(soap_tmp___trc__GetRecordingConfiguration.trc__GetRecordingConfiguration, &trc__GetRecordingConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__GetRecordingConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__GetRecordingConfigurationResponse.soap_put(soap, "trc:GetRecordingConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__GetRecordingConfigurationResponse.soap_put(soap, "trc:GetRecordingConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__GetRecordingOptions(RecordingBindingService *soap)
{	struct __trc__GetRecordingOptions soap_tmp___trc__GetRecordingOptions;
	_trc__GetRecordingOptionsResponse trc__GetRecordingOptionsResponse;
	trc__GetRecordingOptionsResponse.soap_default(soap);
	soap_default___trc__GetRecordingOptions(soap, &soap_tmp___trc__GetRecordingOptions);
	if (!soap_get___trc__GetRecordingOptions(soap, &soap_tmp___trc__GetRecordingOptions, "-trc:GetRecordingOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetRecordingOptions(soap_tmp___trc__GetRecordingOptions.trc__GetRecordingOptions, &trc__GetRecordingOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__GetRecordingOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__GetRecordingOptionsResponse.soap_put(soap, "trc:GetRecordingOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__GetRecordingOptionsResponse.soap_put(soap, "trc:GetRecordingOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__CreateTrack(RecordingBindingService *soap)
{	struct __trc__CreateTrack soap_tmp___trc__CreateTrack;
	_trc__CreateTrackResponse trc__CreateTrackResponse;
	trc__CreateTrackResponse.soap_default(soap);
	soap_default___trc__CreateTrack(soap, &soap_tmp___trc__CreateTrack);
	if (!soap_get___trc__CreateTrack(soap, &soap_tmp___trc__CreateTrack, "-trc:CreateTrack", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->CreateTrack(soap_tmp___trc__CreateTrack.trc__CreateTrack, &trc__CreateTrackResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__CreateTrackResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__CreateTrackResponse.soap_put(soap, "trc:CreateTrackResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__CreateTrackResponse.soap_put(soap, "trc:CreateTrackResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__DeleteTrack(RecordingBindingService *soap)
{	struct __trc__DeleteTrack soap_tmp___trc__DeleteTrack;
	_trc__DeleteTrackResponse trc__DeleteTrackResponse;
	trc__DeleteTrackResponse.soap_default(soap);
	soap_default___trc__DeleteTrack(soap, &soap_tmp___trc__DeleteTrack);
	if (!soap_get___trc__DeleteTrack(soap, &soap_tmp___trc__DeleteTrack, "-trc:DeleteTrack", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->DeleteTrack(soap_tmp___trc__DeleteTrack.trc__DeleteTrack, &trc__DeleteTrackResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__DeleteTrackResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__DeleteTrackResponse.soap_put(soap, "trc:DeleteTrackResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__DeleteTrackResponse.soap_put(soap, "trc:DeleteTrackResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__GetTrackConfiguration(RecordingBindingService *soap)
{	struct __trc__GetTrackConfiguration soap_tmp___trc__GetTrackConfiguration;
	_trc__GetTrackConfigurationResponse trc__GetTrackConfigurationResponse;
	trc__GetTrackConfigurationResponse.soap_default(soap);
	soap_default___trc__GetTrackConfiguration(soap, &soap_tmp___trc__GetTrackConfiguration);
	if (!soap_get___trc__GetTrackConfiguration(soap, &soap_tmp___trc__GetTrackConfiguration, "-trc:GetTrackConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetTrackConfiguration(soap_tmp___trc__GetTrackConfiguration.trc__GetTrackConfiguration, &trc__GetTrackConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__GetTrackConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__GetTrackConfigurationResponse.soap_put(soap, "trc:GetTrackConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__GetTrackConfigurationResponse.soap_put(soap, "trc:GetTrackConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__SetTrackConfiguration(RecordingBindingService *soap)
{	struct __trc__SetTrackConfiguration soap_tmp___trc__SetTrackConfiguration;
	_trc__SetTrackConfigurationResponse trc__SetTrackConfigurationResponse;
	trc__SetTrackConfigurationResponse.soap_default(soap);
	soap_default___trc__SetTrackConfiguration(soap, &soap_tmp___trc__SetTrackConfiguration);
	if (!soap_get___trc__SetTrackConfiguration(soap, &soap_tmp___trc__SetTrackConfiguration, "-trc:SetTrackConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->SetTrackConfiguration(soap_tmp___trc__SetTrackConfiguration.trc__SetTrackConfiguration, &trc__SetTrackConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__SetTrackConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__SetTrackConfigurationResponse.soap_put(soap, "trc:SetTrackConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__SetTrackConfigurationResponse.soap_put(soap, "trc:SetTrackConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__CreateRecordingJob(RecordingBindingService *soap)
{	struct __trc__CreateRecordingJob soap_tmp___trc__CreateRecordingJob;
	_trc__CreateRecordingJobResponse trc__CreateRecordingJobResponse;
	trc__CreateRecordingJobResponse.soap_default(soap);
	soap_default___trc__CreateRecordingJob(soap, &soap_tmp___trc__CreateRecordingJob);
	if (!soap_get___trc__CreateRecordingJob(soap, &soap_tmp___trc__CreateRecordingJob, "-trc:CreateRecordingJob", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->CreateRecordingJob(soap_tmp___trc__CreateRecordingJob.trc__CreateRecordingJob, &trc__CreateRecordingJobResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__CreateRecordingJobResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__CreateRecordingJobResponse.soap_put(soap, "trc:CreateRecordingJobResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__CreateRecordingJobResponse.soap_put(soap, "trc:CreateRecordingJobResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__DeleteRecordingJob(RecordingBindingService *soap)
{	struct __trc__DeleteRecordingJob soap_tmp___trc__DeleteRecordingJob;
	_trc__DeleteRecordingJobResponse trc__DeleteRecordingJobResponse;
	trc__DeleteRecordingJobResponse.soap_default(soap);
	soap_default___trc__DeleteRecordingJob(soap, &soap_tmp___trc__DeleteRecordingJob);
	if (!soap_get___trc__DeleteRecordingJob(soap, &soap_tmp___trc__DeleteRecordingJob, "-trc:DeleteRecordingJob", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->DeleteRecordingJob(soap_tmp___trc__DeleteRecordingJob.trc__DeleteRecordingJob, &trc__DeleteRecordingJobResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__DeleteRecordingJobResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__DeleteRecordingJobResponse.soap_put(soap, "trc:DeleteRecordingJobResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__DeleteRecordingJobResponse.soap_put(soap, "trc:DeleteRecordingJobResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__GetRecordingJobs(RecordingBindingService *soap)
{	struct __trc__GetRecordingJobs soap_tmp___trc__GetRecordingJobs;
	_trc__GetRecordingJobsResponse trc__GetRecordingJobsResponse;
	trc__GetRecordingJobsResponse.soap_default(soap);
	soap_default___trc__GetRecordingJobs(soap, &soap_tmp___trc__GetRecordingJobs);
	if (!soap_get___trc__GetRecordingJobs(soap, &soap_tmp___trc__GetRecordingJobs, "-trc:GetRecordingJobs", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetRecordingJobs(soap_tmp___trc__GetRecordingJobs.trc__GetRecordingJobs, &trc__GetRecordingJobsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__GetRecordingJobsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__GetRecordingJobsResponse.soap_put(soap, "trc:GetRecordingJobsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__GetRecordingJobsResponse.soap_put(soap, "trc:GetRecordingJobsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__SetRecordingJobConfiguration(RecordingBindingService *soap)
{	struct __trc__SetRecordingJobConfiguration soap_tmp___trc__SetRecordingJobConfiguration;
	_trc__SetRecordingJobConfigurationResponse trc__SetRecordingJobConfigurationResponse;
	trc__SetRecordingJobConfigurationResponse.soap_default(soap);
	soap_default___trc__SetRecordingJobConfiguration(soap, &soap_tmp___trc__SetRecordingJobConfiguration);
	if (!soap_get___trc__SetRecordingJobConfiguration(soap, &soap_tmp___trc__SetRecordingJobConfiguration, "-trc:SetRecordingJobConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->SetRecordingJobConfiguration(soap_tmp___trc__SetRecordingJobConfiguration.trc__SetRecordingJobConfiguration, &trc__SetRecordingJobConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__SetRecordingJobConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__SetRecordingJobConfigurationResponse.soap_put(soap, "trc:SetRecordingJobConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__SetRecordingJobConfigurationResponse.soap_put(soap, "trc:SetRecordingJobConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__GetRecordingJobConfiguration(RecordingBindingService *soap)
{	struct __trc__GetRecordingJobConfiguration soap_tmp___trc__GetRecordingJobConfiguration;
	_trc__GetRecordingJobConfigurationResponse trc__GetRecordingJobConfigurationResponse;
	trc__GetRecordingJobConfigurationResponse.soap_default(soap);
	soap_default___trc__GetRecordingJobConfiguration(soap, &soap_tmp___trc__GetRecordingJobConfiguration);
	if (!soap_get___trc__GetRecordingJobConfiguration(soap, &soap_tmp___trc__GetRecordingJobConfiguration, "-trc:GetRecordingJobConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetRecordingJobConfiguration(soap_tmp___trc__GetRecordingJobConfiguration.trc__GetRecordingJobConfiguration, &trc__GetRecordingJobConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__GetRecordingJobConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__GetRecordingJobConfigurationResponse.soap_put(soap, "trc:GetRecordingJobConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__GetRecordingJobConfigurationResponse.soap_put(soap, "trc:GetRecordingJobConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__SetRecordingJobMode(RecordingBindingService *soap)
{	struct __trc__SetRecordingJobMode soap_tmp___trc__SetRecordingJobMode;
	_trc__SetRecordingJobModeResponse trc__SetRecordingJobModeResponse;
	trc__SetRecordingJobModeResponse.soap_default(soap);
	soap_default___trc__SetRecordingJobMode(soap, &soap_tmp___trc__SetRecordingJobMode);
	if (!soap_get___trc__SetRecordingJobMode(soap, &soap_tmp___trc__SetRecordingJobMode, "-trc:SetRecordingJobMode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->SetRecordingJobMode(soap_tmp___trc__SetRecordingJobMode.trc__SetRecordingJobMode, &trc__SetRecordingJobModeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__SetRecordingJobModeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__SetRecordingJobModeResponse.soap_put(soap, "trc:SetRecordingJobModeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__SetRecordingJobModeResponse.soap_put(soap, "trc:SetRecordingJobModeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___trc__GetRecordingJobState(RecordingBindingService *soap)
{	struct __trc__GetRecordingJobState soap_tmp___trc__GetRecordingJobState;
	_trc__GetRecordingJobStateResponse trc__GetRecordingJobStateResponse;
	trc__GetRecordingJobStateResponse.soap_default(soap);
	soap_default___trc__GetRecordingJobState(soap, &soap_tmp___trc__GetRecordingJobState);
	if (!soap_get___trc__GetRecordingJobState(soap, &soap_tmp___trc__GetRecordingJobState, "-trc:GetRecordingJobState", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetRecordingJobState(soap_tmp___trc__GetRecordingJobState.trc__GetRecordingJobState, &trc__GetRecordingJobStateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	trc__GetRecordingJobStateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || trc__GetRecordingJobStateResponse.soap_put(soap, "trc:GetRecordingJobStateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || trc__GetRecordingJobStateResponse.soap_put(soap, "trc:GetRecordingJobStateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
