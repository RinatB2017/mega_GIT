import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump TelegramQt 1.0 /home/OMP/a.akulich/Qt/5.7/gcc_64/qml/'

Module {
    dependencies: ["QtQuick 2.7"]
    Component {
        name: "CAppInformation"
        prototype: "QObject"
        exports: ["AppInformation 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "appId"; type: "uint" }
        Property { name: "appHash"; type: "string" }
        Property { name: "appVersion"; type: "string" }
        Property { name: "deviceInfo"; type: "string" }
        Property { name: "osInfo"; type: "string" }
        Property { name: "languageCode"; type: "string" }
    }
    Component {
        name: "TelegramNamespace"
        prototype: "QObject"
        exports: ["TelegramNamespace 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContactStatus"
            values: {
                "ContactStatusUnknown": 0,
                "ContactStatusOffline": 1,
                "ContactStatusOnline": 2
            }
        }
        Enum {
            name: "AuthSignError"
            values: {
                "AuthSignErrorUnknown": 0,
                "AuthSignErrorAppIdIsInvalid": 1,
                "AuthSignErrorPhoneNumberIsInvalid": 2,
                "AuthSignErrorPhoneNumberIsOccupied": 3,
                "AuthSignErrorPhoneNumberIsUnoccupied": 4,
                "AuthSignErrorPhoneCodeIsInvalid": 5,
                "AuthSignErrorPhoneCodeIsExpired": 6,
                "AuthSignErrorPasswordHashInvalid": 7,
                "AuthSignErrorFirstNameIsInvalid": 8,
                "AuthSignErrorLastNameIsInvalid": 9
            }
        }
        Enum {
            name: "ConnectionState"
            values: {
                "ConnectionStateDisconnected": 0,
                "ConnectionStateConnecting": 1,
                "ConnectionStateConnected": 2,
                "ConnectionStateAuthRequired": 3,
                "ConnectionStateAuthenticated": 4,
                "ConnectionStateReady": 5
            }
        }
    }
    Component {
        name: "CTelegramCore"
        prototype: "QObject"
        exports: ["Core 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UnauthorizedError"
            values: {
                "UnauthorizedUnknownError": 0,
                "UnauthorizedErrorKeyUnregistered": 1,
                "UnauthorizedErrorKeyInvalid": 2,
                "UnauthorizedErrorUserDeactivated": 3,
                "UnauthorizedErrorUserSessionRevoked": 4,
                "UnauthorizedErrorUserSessionExpired": 5,
                "UnauthorizedErrorActiveUserRequired": 6,
                "UnauthorizedErrorNeedPermanentKey": 7,
                "UnauthorizedSessionPasswordNeeded": 8
            }
        }
        Property { name: "connectionSecretInfo"; type: "QByteArray"; isReadonly: true }
        Property { name: "updatesEnabled"; type: "bool" }
        Signal {
            name: "connectionStateChanged"
            Parameter { name: "status"; type: "TelegramNamespace::ConnectionState" }
        }
        Signal {
            name: "selfUserAvailable"
            Parameter { name: "userId"; type: "uint" }
        }
        Signal {
            name: "userInfoReceived"
            Parameter { name: "userId"; type: "uint" }
        }
        Signal { name: "phoneCodeRequired" }
        Signal {
            name: "loggedOut"
            Parameter { name: "result"; type: "bool" }
        }
        Signal {
            name: "authSignErrorReceived"
            Parameter { name: "errorCode"; type: "TelegramNamespace::AuthSignError" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal { name: "contactListChanged" }
        Signal {
            name: "contactProfileChanged"
            Parameter { name: "userId"; type: "uint" }
        }
        Signal {
            name: "phoneStatusReceived"
            Parameter { name: "phone"; type: "string" }
            Parameter { name: "registered"; type: "bool" }
        }
        Signal {
            name: "passwordInfoReceived"
            Parameter { name: "requestId"; type: "qulonglong" }
        }
        Signal {
            name: "avatarReceived"
            Parameter { name: "userId"; type: "uint" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "mimeType"; type: "string" }
            Parameter { name: "avatarToken"; type: "string" }
        }
        Signal {
            name: "messageMediaDataReceived"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "mimeType"; type: "string" }
            Parameter { name: "type"; type: "TelegramNamespace::MessageType" }
            Parameter { name: "offset"; type: "uint" }
            Parameter { name: "size"; type: "uint" }
        }
        Signal {
            name: "messageReceived"
            Parameter { name: "message"; type: "Telegram::Message" }
        }
        Signal {
            name: "contactStatusChanged"
            Parameter { name: "userId"; type: "uint" }
            Parameter { name: "status"; type: "TelegramNamespace::ContactStatus" }
        }
        Signal {
            name: "contactMessageActionChanged"
            Parameter { name: "userId"; type: "uint" }
            Parameter { name: "action"; type: "TelegramNamespace::MessageAction" }
        }
        Signal {
            name: "contactChatMessageActionChanged"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "userId"; type: "uint" }
            Parameter { name: "action"; type: "TelegramNamespace::MessageAction" }
        }
        Signal {
            name: "sentMessageIdReceived"
            Parameter { name: "randomId"; type: "qulonglong" }
            Parameter { name: "resolvedId"; type: "uint" }
        }
        Signal {
            name: "messageReadInbox"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Signal {
            name: "messageReadOutbox"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Signal {
            name: "createdChatIdReceived"
            Parameter { name: "randomId"; type: "qulonglong" }
            Parameter { name: "resolvedId"; type: "uint" }
        }
        Signal {
            name: "chatAdded"
            Parameter { name: "chatId"; type: "uint" }
        }
        Signal {
            name: "chatChanged"
            Parameter { name: "chatId"; type: "uint" }
        }
        Signal {
            name: "authorizationErrorReceived"
            Parameter { name: "errorCode"; type: "UnauthorizedError" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "userNameStatusUpdated"
            Parameter { name: "userName"; type: "string" }
            Parameter { name: "status"; type: "TelegramNamespace::UserNameStatus" }
        }
        Signal {
            name: "filePartReceived"
            Parameter { name: "requestId"; type: "uint" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "mimeType"; type: "string" }
            Parameter { name: "offset"; type: "uint" }
            Parameter { name: "totalSize"; type: "uint" }
        }
        Signal {
            name: "filePartUploaded"
            Parameter { name: "requestId"; type: "uint" }
            Parameter { name: "offset"; type: "uint" }
            Parameter { name: "totalSize"; type: "uint" }
        }
        Signal {
            name: "fileRequestFinished"
            Parameter { name: "requestId"; type: "uint" }
            Parameter { name: "requestResult"; type: "Telegram::RemoteFile" }
        }
        Method {
            name: "setMessageReceivingFilter"
            Parameter { name: "flags"; type: "TelegramNamespace::MessageFlags" }
        }
        Method {
            name: "setAcceptableMessageTypes"
            Parameter { name: "types"; type: "TelegramNamespace::MessageTypeFlags" }
        }
        Method {
            name: "setAutoReconnection"
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "setUpdatesEnabled"
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "setPingInterval"
            Parameter { name: "interval"; type: "uint" }
            Parameter { name: "serverDisconnectionAdditionTime"; type: "uint" }
        }
        Method {
            name: "setPingInterval"
            Parameter { name: "interval"; type: "uint" }
        }
        Method {
            name: "setMediaDataBufferSize"
            Parameter { name: "size"; type: "uint" }
        }
        Method {
            name: "initConnection"
            type: "bool"
            Parameter { name: "dcs"; type: "QVector<Telegram::DcOption>" }
        }
        Method { name: "initConnection"; type: "bool" }
        Method {
            name: "restoreConnection"
            type: "bool"
            Parameter { name: "secret"; type: "QByteArray" }
        }
        Method { name: "closeConnection" }
        Method { name: "logOut"; type: "bool" }
        Method {
            name: "requestPhoneStatus"
            Parameter { name: "phoneNumber"; type: "string" }
        }
        Method {
            name: "requestPhoneCode"
            Parameter { name: "phoneNumber"; type: "string" }
        }
        Method { name: "getPassword"; type: "qulonglong" }
        Method {
            name: "tryPassword"
            Parameter { name: "salt"; type: "QByteArray" }
            Parameter { name: "password"; type: "string" }
        }
        Method {
            name: "tryPassword"
            Parameter { name: "salt"; type: "QByteArray" }
            Parameter { name: "password"; type: "QByteArray" }
        }
        Method {
            name: "signIn"
            Parameter { name: "phoneNumber"; type: "string" }
            Parameter { name: "authCode"; type: "string" }
        }
        Method {
            name: "signUp"
            Parameter { name: "phoneNumber"; type: "string" }
            Parameter { name: "authCode"; type: "string" }
            Parameter { name: "firstName"; type: "string" }
            Parameter { name: "lastName"; type: "string" }
        }
        Method {
            name: "addContact"
            Parameter { name: "phoneNumber"; type: "string" }
        }
        Method {
            name: "addContacts"
            Parameter { name: "phoneNumbers"; type: "QStringList" }
        }
        Method {
            name: "deleteContact"
            Parameter { name: "userId"; type: "uint" }
        }
        Method {
            name: "deleteContacts"
            Parameter { name: "userIds"; type: "QVector<quint32>" }
        }
        Method {
            name: "requestContactAvatar"
            Parameter { name: "userId"; type: "uint" }
        }
        Method {
            name: "requestMessageMediaData"
            Parameter { name: "messageId"; type: "uint" }
        }
        Method {
            name: "requestFile"
            type: "uint"
            Parameter { name: "file"; type: "const Telegram::RemoteFile"; isPointer: true }
        }
        Method {
            name: "requestHistory"
            type: "bool"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "offset"; type: "int" }
            Parameter { name: "limit"; type: "int" }
        }
        Method {
            name: "resolveUsername"
            type: "uint"
            Parameter { name: "userName"; type: "string" }
        }
        Method {
            name: "uploadFile"
            type: "uint"
            Parameter { name: "fileContent"; type: "QByteArray" }
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "uploadFile"
            type: "uint"
            Parameter { name: "source"; type: "QIODevice"; isPointer: true }
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "sendMessage"
            type: "qulonglong"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "sendMedia"
            type: "qulonglong"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageInfo"; type: "Telegram::MessageMediaInfo" }
        }
        Method {
            name: "forwardMessage"
            type: "qulonglong"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Method {
            name: "setTyping"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "action"; type: "TelegramNamespace::MessageAction" }
        }
        Method {
            name: "setMessageRead"
            Parameter { name: "peer"; type: "Telegram::Peer" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Method {
            name: "setOnlineStatus"
            Parameter { name: "onlineStatus"; type: "bool" }
        }
        Method {
            name: "checkUserName"
            Parameter { name: "userName"; type: "string" }
        }
        Method {
            name: "setUserName"
            Parameter { name: "newUserName"; type: "string" }
        }
        Method {
            name: "createChat"
            type: "qulonglong"
            Parameter { name: "userIds"; type: "QVector<quint32>" }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "addChatUser"
            type: "bool"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "userId"; type: "uint" }
            Parameter { name: "forwardMessages"; type: "uint" }
        }
        Method {
            name: "addChatUser"
            type: "bool"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "userId"; type: "uint" }
        }
        Method {
            name: "sendChatMessage"
            type: "qulonglong"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "setChatTyping"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "action"; type: "TelegramNamespace::MessageAction" }
        }
        Method {
            name: "setChatMessageRead"
            Parameter { name: "chatId"; type: "uint" }
            Parameter { name: "messageId"; type: "uint" }
        }
        Method {
            name: "setAppInformation"
            Parameter { name: "newAppInfo"; type: "CAppInformation"; isPointer: true }
        }
        Method {
            name: "setAppInformation"
            Parameter { name: "newAppInfo"; type: "const CAppInformation"; isPointer: true }
        }
        Method { name: "builtInDcs"; type: "QVector<Telegram::DcOption>" }
        Method { name: "defaultPingInterval"; type: "uint" }
        Method { name: "connectionState"; type: "TelegramNamespace::ConnectionState" }
        Method { name: "selfPhone"; type: "string" }
        Method { name: "selfId"; type: "uint" }
        Method { name: "maxMessageId"; type: "uint" }
        Method { name: "contactList"; type: "QVector<quint32>" }
        Method { name: "chatList"; type: "QVector<quint32>" }
        Method {
            name: "contactAvatarToken"
            type: "string"
            Parameter { name: "userId"; type: "uint" }
        }
        Method {
            name: "chatTitle"
            type: "string"
            Parameter { name: "chatId"; type: "uint" }
        }
        Method {
            name: "getPasswordData"
            type: "Telegram::PasswordInfo"
            Parameter { name: "requestId"; type: "qulonglong" }
        }
    }
}
